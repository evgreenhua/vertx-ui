/*
 * BABEL 和 NODE 环境设置
 * 开发环境：development
 */
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently ignoring
// them. In the future, promise rejections that are not handled will terminate
// the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
    throw err;
});

/*
 * 读取环境变量相关信息
 */
require('../config/env');
const paths = require('../config/paths');
const config = require('../config/webpack.config.dev');

const fs = require('fs');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {choosePort, createCompiler, prepareProxy, prepareUrls} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const createDevServerConfig = require('../config/webpackDevServer.config');

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
    process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3001;
const HOST = process.env.HOST || '0.0.0.0';

// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `detect()` Promise resolves to the next free port.
choosePort(HOST, DEFAULT_PORT).then(port => {
    if (port == null) {
        // We have not found a port.
        return;
    }
    const protocol = process.env.HTTPS === 'true'
        ? 'https'
        : 'http';
    const appName = require(paths.appPackageJson).name;
    const urls = prepareUrls(protocol, HOST, port);
    /*
     * 打印收集的信息
     * 解决：
     * webpack is not a function
     * 旧代码：
     * const compiler = createCompiler(webpack, config, appName, urls, useYarn);
     */
    // const compiler = createCompiler(webpack, config, appName, urls, useYarn);
    const compiler = createCompiler({webpack, config, appName, urls, useYarn});
    /*
     * 加载代理设置
     */
    const proxySetting = require(paths.appPackageJson).proxy;
    const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
    /*
     * Serve webpack assets generated by the compiler over a web sever.
     * 用于Host Dev Server 中的部分配置
     */
    const serverConfig = createDevServerConfig(proxyConfig, urls.lanUrlForConfig);
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, err => {
        if (err) {
            return console.log(err);
        }
        if (isInteractive) {
            clearConsole();
        }
        console.log(chalk.green('Starting the development server...\n'));
        // openBrowser(urls.localUrlForBrowser);
    });

    ['SIGINT', 'SIGTERM'].forEach(function (sig) {
        process
            .on(sig, function () {
                devServer.close();
                process.exit();
            });
    });
}).catch(err => {
    if (err && err.message) {
        console.log(err.message);
    }
    process.exit(1);
});
